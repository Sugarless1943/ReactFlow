/* eslint-disable */
/**
 * 特冶
 * Swagger2
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise } from "axios";
import { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  createRequestFunction,
  DUMMY_BASE_URL,
  setSearchParams,
  toPathString,
} from "./common";
// @ts-ignore
import { BaseAPI, BASE_PATH, RequestArgs } from "./base";

/**
 *
 * @export
 * @interface ResultCommon
 */
export interface ResultCommon {
  /**
   *
   * @type {number}
   * @memberof ResultCommon
   */
  code?: number;
  /**
   *
   * @type {object}
   * @memberof ResultCommon
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof ResultCommon
   */
  message?: string;
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 通过用户名查询用户信息
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByNameUsingGET: async (
      username?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/findByName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter["username"] = username;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询所有用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersUsingGET: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 密码重置
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPasswordUsingGET: async (
      username?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/resetPassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter["username"] = username;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 密码修改
     * @param {string} [password] password
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordUsingGET: async (
      password?: string,
      username?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/updatePassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (password !== undefined) {
        localVarQueryParameter["password"] = password;
      }

      if (username !== undefined) {
        localVarQueryParameter["username"] = username;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 通过用户名查询用户信息
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findByNameUsingGET(
      username?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCommon>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.findByNameUsingGET(username, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 查询所有用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUsersUsingGET(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCommon>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.findUsersUsingGET(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 密码重置
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPasswordUsingGET(
      username?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCommon>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.resetPasswordUsingGET(
          username,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 密码修改
     * @param {string} [password] password
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePasswordUsingGET(
      password?: string,
      username?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCommon>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updatePasswordUsingGET(
          password,
          username,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary 通过用户名查询用户信息
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByNameUsingGET(
      username?: string,
      options?: any
    ): AxiosPromise<ResultCommon> {
      return localVarFp
        .findByNameUsingGET(username, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询所有用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersUsingGET(options?: any): AxiosPromise<ResultCommon> {
      return localVarFp
        .findUsersUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 密码重置
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPasswordUsingGET(
      username?: string,
      options?: any
    ): AxiosPromise<ResultCommon> {
      return localVarFp
        .resetPasswordUsingGET(username, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 密码修改
     * @param {string} [password] password
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordUsingGET(
      password?: string,
      username?: string,
      options?: any
    ): AxiosPromise<ResultCommon> {
      return localVarFp
        .updatePasswordUsingGET(password, username, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary 通过用户名查询用户信息
   * @param {string} [username] username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public findByNameUsingGET(username?: string, options?: any) {
    return UserApiFp(this.configuration)
      .findByNameUsingGET(username, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询所有用户
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public findUsersUsingGET(options?: any) {
    return UserApiFp(this.configuration)
      .findUsersUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 密码重置
   * @param {string} [username] username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public resetPasswordUsingGET(username?: string, options?: any) {
    return UserApiFp(this.configuration)
      .resetPasswordUsingGET(username, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 密码修改
   * @param {string} [password] password
   * @param {string} [username] username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public updatePasswordUsingGET(
    password?: string,
    username?: string,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .updatePasswordUsingGET(password, username, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
